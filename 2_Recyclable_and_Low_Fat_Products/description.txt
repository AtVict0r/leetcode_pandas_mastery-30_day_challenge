1757. Recyclable and Low Fat Products

SQL Schema
Create table If Not Exists Products (product_id int, low_fats ENUM('Y', 'N'), recyclable ENUM('Y','N'))
Truncate table Products
insert into Products (product_id, low_fats, recyclable) values ('0', 'Y', 'N')
insert into Products (product_id, low_fats, recyclable) values ('1', 'Y', 'Y')
insert into Products (product_id, low_fats, recyclable) values ('2', 'N', 'Y')
insert into Products (product_id, low_fats, recyclable) values ('3', 'Y', 'Y')
insert into Products (product_id, low_fats, recyclable) values ('4', 'N', 'N')

Pandas Schema
Products = pd.DataFrame([], columns=['product_id', 'low_fats', 'recyclable']).astype({'product_id':'int64', 'low_fats':'category', 'recyclable':'category'})

Table: Products

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| product_id  | int     |
| low_fats    | enum    |
| recyclable  | enum    |
+-------------+---------+
In SQL, product_id is the primary key for this table.
low_fats is an ENUM of type ('Y', 'N') where 'Y' means this product is low fat and 'N' means it is not.
recyclable is an ENUM of types ('Y', 'N') where 'Y' means this product is recyclable and 'N' means it is not.

 

Find the ids of products that are both low fat and recyclable.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Products table:
+-------------+----------+------------+
| product_id  | low_fats | recyclable |
+-------------+----------+------------+
| 0           | Y        | N          |
| 1           | Y        | Y          |
| 2           | N        | Y          |
| 3           | Y        | Y          |
| 4           | N        | N          |
+-------------+----------+------------+
Output: 
+-------------+
| product_id  |
+-------------+
| 1           |
| 3           |
+-------------+
Explanation: Only products 1 and 3 are both low fat and recyclable.


Solution
Approach: Selecting rows based on conditions
Pandas

We have the original DataFrame products shown below:
product_id	low_fats	recyclable
0			Y			N
1			Y			Y
2			N			Y
3			Y			Y
4			N			N

In Pandas, boolean indexing allows us to filter the DataFrame by using boolean arrays or conditions. It means that we can use a Series of boolean values or create conditions that evaluate to True or False for each row in the DataFrame. By applying these boolean values or conditions as an index to the DataFrame, we can selectively extract the rows that satisfy the conditions.

In this scenario, we should select only the rows where the low_fats column has a value of "Y" (indicating the product is low fat) and the recyclable column has a value of "Y" (indicating the product is recyclable), which can be represented as:

df = products[(products['low_fats'] == 'Y') & (products['recyclable'] == 'Y')]

This filtering creates a new DataFrame df containing the products that meet both criteria. Note that the rows with product_id equal to 0, 2, and 4 are filtered out.
product_id	low_fats	recyclable
1			Y			Y
3			Y			Y

Next, we need to select only the desired column product_id from df using double square brackets.

df = df[['product_id']]

The resulting DataFrame looks like this:
product_id
1
3

The complete code is shown below:

import pandas as pd

def find_products(products: pd.DataFrame) -> pd.DataFrame:
    df = products[(products['low_fats'] == 'Y') & (products['recyclable'] == 'Y')]

    df = df[['product_id']]
    
    return df



MySQL

The keyword SELECT is used to specify the columns that we want to retrieve from the table Products. In this scenario, we want to retrieve the product_id column.

The keyword WHERE is used to filter the rows in the table Products based on specific conditions, which the low_fats column has the value "Y" (indicating low-fat products) and the recyclable column has the value "Y" (indicating recyclable products). We use the logical operator AND to combine both conditions, ensuring that the final result includes only product IDs for products that are both low fat and recyclable.

SELECT
    product_id
FROM
    Products
WHERE
    low_fats = 'Y' AND recyclable = 'Y'